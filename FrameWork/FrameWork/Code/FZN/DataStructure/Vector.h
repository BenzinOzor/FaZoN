//------------------------------------------------------------------------
//Author : Philippe OFFERMANN
//Date : 03.05.15
//Description : Custom list class
//------------------------------------------------------------------------

#ifndef _LIST_H_
#define _LIST_H_

#define DefaultListSize 20
#define DefaultListReallocSize 20

namespace fzn
{
	template <class USER_TYPE> class Vector
	{
	public:
		//Element struct used in the list allowing the user to see what is in the container
		struct Element
		{
			Element()
			{
				prev = nullptr;
				next = nullptr;
				index = -1;
			}
			~Element()
			{
				prev = nullptr;
				next = nullptr;
				index = -1;
			}

			USER_TYPE userElement;
			int index;

			Element* prev;
			Element* next;
		};

		/////////////////CONSTRUCTOR / DESTRUCTOR/////////////////

		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Default parametered constructor
		//Parameter 1 : Vector initial size (20 by default)
		//Parameter 2 : Allocate (true) or not the elements at the creation of the list (acces by index right after creation for example)
		//NB : Number of elements will be initial size and push backs will add elements after the ones allocated
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Vector(int _initialSize=DefaultListSize,INT8 _allocate=FALSE);
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Copy constructor
		//Parameter : Vector to copy
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Vector(const Vector& _list);
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Functor =
		//Parameter : Vector to copy
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Vector& operator=(const Vector& _list);
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Default destructor
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		~Vector();


		/////////////////OTHER FUNCTIONS/////////////////

		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Adds an element at the end of the list
		//Parameter : Element to add
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		int PushBack( const USER_TYPE& _element );
		void Insert( int iWhere, const USER_TYPE& _element );
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Adds an element at the end of the list
		//Parameter : Element to add
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//int PushBack(USER_TYPE* _element);
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Removes the last element of the list
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		void PopBack();
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Removes an element from the list
		//Parameter : Element to remove
		//Return value : Next valid element (nullptr if none)
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Element* Remove(Element* _element)
		{
			if(_element == nullptr)
				return nullptr;

			int index = _element->index;

			return Remove( index );
		}
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Removes an element from the list
		//Parameter : Index of the element to remove
		//Return value : Next valid element (nullptr if none)
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Element* Remove(int _index)
		{
			if(_index < 0 || _index >= m_iCurrentIndex)
				return nullptr;

			m_iCurrentIndex--;

			for( int iElement = _index; iElement < m_iCurrentIndex; ++iElement )
			{
				m_list[ iElement ]->userElement = m_list[ iElement + 1 ]->userElement;
			}

			//m_list[_index]->userElement = m_list[m_iCurrentIndex]->userElement;

			if(m_list[m_iCurrentIndex]->prev != nullptr)
				m_list[m_iCurrentIndex]->prev->next = nullptr;

			delete m_list[m_iCurrentIndex];
			m_list[m_iCurrentIndex] = nullptr;

			m_iNbElements--;

			m_front = m_list[0];
			if(m_iCurrentIndex > 0)
				m_back = m_list[m_iCurrentIndex-1];
			else m_back = m_list[0];

			return m_list[_index];
		}
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Finds the list element of a given user object
		//Return value : Element (nullptr if not found)
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Element* FindElement(USER_TYPE& _userElement)
		{
			for(int i=0 ; i<m_iNbElements ; ++i)
			{
				if(m_list[i]->userElement == _userElement)
					return m_list[i];
			}

			return nullptr;
		}
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Finds the list element of a given user object
		//Return value : Element (nullptr if not found)
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Element* FindElement(USER_TYPE&& _userElement)
		{
			for(int i=0 ; i<m_iNbElements ; ++i)
			{
				if(m_list[i]->userElement == _userElement)
					return m_list[i];
			}

			return nullptr;
		}
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Finds the index of a given user element
		//Return value : Index (-1 if not found)
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		int FindIndex(USER_TYPE& _userElement);
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Finds the index of a given user element
		//Return value : Index (-1 if not found)
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		int FindIndex(USER_TYPE&& _userElement);
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Clears all the container
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		void Clear();


		/////////////////OPERATORS/////////////////

		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Access operator
		//Parameter : Index to reach in the list
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		USER_TYPE& operator[](int _index);
		const USER_TYPE& operator[](int _index) const;


		/////////////////ACCESSOR / MUTATOR/////////////////

		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Accessor on the front user element of the list
		//Return value : Front user element
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		USER_TYPE& Front();
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Accessor on the back user element of the list
		//Return value : Back user element
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		USER_TYPE& Back();
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Accessor on the first list element of the list
		//Return value : First list element
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Element* First() { return m_front; }
		USER_TYPE& begin() { return Front(); }
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Accessor on the last list element of the list
		//Return value : Last list element
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Element* Last() { return m_back; }
		USER_TYPE& end() { return Back(); }
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Accessor on the next element in the list
		//Parameter : Current element
		//Return value : Next element
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Element* Next(Element* _element) { return _element->next; }
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Accessor on the previous element in the list
		//Parameter : Current element
		//Return value : Previous element
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Element* Previous(Element* _element) { return _element->prev; }
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Accessor on the number of elements in the list
		//Return value : Number of elements
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		int Size() const;
		bool Empty() const { return Size() == 0; }
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Accessor on current maximum size of the list
		//Return value : Maximum size
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		int GetMaxSize();
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Accessor on the list reallocation size
		//Return value : Reallocation size
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		int GetReallocSize();
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Mutator on the list reallocation size
		//Return value : New reallocation size
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		void SetReallocSize(int _reallocSize);



		/////////////////MEMBER VARIABLES/////////////////

		int m_initialSize;					//Vector initial size

	private:
		/////////////////OTHER FUNCTIONS/////////////////

		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//Reallocates the list so new elements can be added to it
		//------------------------------------------------------------------------------------------------------------------------------------------------------------------
		void ReallocateList();


		/////////////////MEMBER VARIABLES/////////////////

		Element** m_list;					//Container of the user specified class
		Element* m_front;					//First element of the list
		Element* m_back;					//Last element of the list
		int m_iCurrentMaxSize;				//Current maximum size (including unused cases of the list)
		int m_iNbElements;					//Current number of elements in the list
		int m_iCurrentIndex;				//Current index in the list
		int m_iReallocSize;					//Reallocation size used when the current size is too small
	};
} //namespace fzn

#include "FZN/DataStructure/Vector.inl"

#endif //_MUSIC_H_