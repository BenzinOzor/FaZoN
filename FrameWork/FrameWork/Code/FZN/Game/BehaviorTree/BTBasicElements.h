//------------------------------------------------------------------------
/// Author : Philippe OFFERMANN
/// Date : /
/// Description : Behavior tree base classes
//------------------------------------------------------------------------

#ifndef _BTBASICS_H_
#define _BTBASICS_H_

#include <vector>

#include "FZN/Defines.h"

#pragma warning( push )
#pragma warning( disable: 4251 )

namespace fzn
{
	//=========================================================
	///=======================BTELEMENT=========================
	//=========================================================
	
	class FZN_EXPORT BTElement
	{
	public :
		//-------------------------------------------------------------------------------------------------
		/// Possible statuses of a BTElement.
		//-------------------------------------------------------------------------------------------------
		enum State
		{
			Invalid,
			Success,
			Failure,
			Running,
			Aborted
		};

		//-------------------------------------------------------------------------------------------------
		/// Default constructor.
		//-------------------------------------------------------------------------------------------------
		BTElement();
		//-------------------------------------------------------------------------------------------------
		/// Destructor.
		//-------------------------------------------------------------------------------------------------
		virtual ~BTElement(){}

		//-------------------------------------------------------------------------------------------------
		/// Manages the calls to the initializing, updating and terminating functions
		/// @return	The current state of the BTElement.
		//-------------------------------------------------------------------------------------------------
		State Tick();
		//-------------------------------------------------------------------------------------------------
		/// Resets the BTElement.
		//-------------------------------------------------------------------------------------------------
		void Reset();
		//-------------------------------------------------------------------------------------------------
		/// Aborts the BTElement and calls OnTerminate.
		//-------------------------------------------------------------------------------------------------
		void Abort();

		//-------------------------------------------------------------------------------------------------
		/// Indicates whether or not the BTElement is terminated.
		/// @return	If true, the BTElement is terminated (Status = success or failure).
		//-------------------------------------------------------------------------------------------------
		bool IsTerminated() const;
		//-------------------------------------------------------------------------------------------------
		/// Indicates whether or not the BTElement is running.
		/// @return	If true, the BTElement is running.
		//-------------------------------------------------------------------------------------------------
		bool IsRunning() const;
		//-------------------------------------------------------------------------------------------------
		/// Gets the current state of the BTElement.
		/// @return	The BTElement state.
		//-------------------------------------------------------------------------------------------------
		State GetState() const;

		//-------------------------------------------------------------------------------------------------
		/// Updates the BTElement.
		/// @return	The BTElement State.
		//-------------------------------------------------------------------------------------------------
		virtual State Update() = 0;
		//-------------------------------------------------------------------------------------------------
		/// Initializes the BTElement, this function is not mandatory.
		//-------------------------------------------------------------------------------------------------
		virtual void OnInitialize(){}
		//-------------------------------------------------------------------------------------------------
		/// Terminates the BTElement, this function is not mandatory.
		/// @param	_status	: A status to process.
		//-------------------------------------------------------------------------------------------------
		virtual void OnTerminate( State /*_status*/ ){}

	protected :
		State m_eState;
	};


	//=========================================================
	///=======================DECORATOR=========================
	//=========================================================
	
	class FZN_EXPORT Decorator : public BTElement
	{
	public :
		virtual ~Decorator();

		//-------------------------------------------------------------------------------------------------
		/// Constructor.
		/// @param [in]	_pChild	: BTElement child of the Decorator.
		//-------------------------------------------------------------------------------------------------
		Decorator( BTElement* _pChild ) : m_pChild( _pChild ){}
		Decorator() : Decorator( nullptr ) {}

		void SetChild( BTElement* _pChild );

	protected : 
		BTElement* m_pChild;
	};


	//=========================================================
	///=======================COMPOSITE=========================
	//=========================================================
	
	class FZN_EXPORT Composite : public BTElement
	{
	public :
		Composite();
		virtual ~Composite();

		//-------------------------------------------------------------------------------------------------
		/// Adds a child in the Composite.
		/// @param [in]	_pChild	: BTElement child of the Composite
		//-------------------------------------------------------------------------------------------------
		void AddChild( BTElement* _pChild );
		//-------------------------------------------------------------------------------------------------
		/// Removes the given child from the Composite
		/// @param [in]	_pChild	: BTElement child to remove.
		//-------------------------------------------------------------------------------------------------
		void RemoveChild( BTElement* _pChild );
		//-------------------------------------------------------------------------------------------------
		/// Clears the children of the Composite.
		//-------------------------------------------------------------------------------------------------
		void ClearChildren();

	protected:
		std::vector< BTElement* >	m_oChildren;
		int							m_iCurrentChild;
	};
} //namespace fzn

#pragma warning( pop )

#endif //_BTBASICS_H_
