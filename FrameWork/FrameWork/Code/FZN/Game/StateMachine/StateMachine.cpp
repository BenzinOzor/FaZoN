//------------------------------------------------------------------------
//Author : Philippe OFFERMANN
//Date : 17.10.14
//Description : State machine management (definitions)
//Portions Copyright (C) Steve Rabin, 2001
//------------------------------------------------------------------------

#include "FZN/Includes.h"
#include "FZN/Game/GameObject/GameObject.h"
#include "FZN/Game/Message/Message.h"
#include "FZN/Game/StateMachine/StateMachine.h"


namespace fzn
{
	/////////////////CONSTRUCTOR / DESTRUCTOR/////////////////

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Default constructor
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	StateMachine::StateMachine()
	{
		m_owner = nullptr;
		m_iCurrentState = 0;
		m_iNextState = 0;
		m_bStateChange = FALSE;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Parametered constructor
	//Parameter : GameObject owner of the state machine
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	StateMachine::StateMachine(GameObject* _object)
	{
		m_owner = _object;
		m_iCurrentState = 0;
		m_iNextState = 0;
		m_bStateChange = FALSE;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Default destructor
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	StateMachine::~StateMachine()
	{

	}


	/////////////////OTHER FUNCTIONS/////////////////

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//State machine initialization
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	void StateMachine::Initialize()
	{
		Process(EVENT_Enter);
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//State machine update
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	void StateMachine::Update()
	{
		Process(EVENT_Update);
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//State machine update
	//Parameter 1 : State to process
	//Parameter 2 : Message to process
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	void StateMachine::Process(StateMachineEvent _event, Message* _msg)
	{
		// Current state didn't handle msg, try Global state (-1)
		if(States(_event, _msg, m_iCurrentState) == FALSE)
		{
			States(_event, _msg, -1);
		}

		// Check for a state change
		int safetyCount = 50;
		while(m_bStateChange && (--safetyCount >= 0))
		{
			m_bStateChange = FALSE;

			// Let the last state clean-up
			States(EVENT_Exit, 0, m_iCurrentState);

			// Set the new state
			m_iCurrentState = m_iNextState;

			// Let the new state initialize
			States(EVENT_Enter, 0, m_iCurrentState);
		}
	}


	/////////////////ACCESSORS / MUTATORS/////////////////

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Mutator on the owner of the state machine
	//Parameter : New owner
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	void StateMachine::SetOwner(GameObject* _owner)
	{
		m_owner = _owner;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Mutator on the current state of the machine
	//Parameter : New state
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	void StateMachine::SetState(unsigned int _newState)
	{
		m_bStateChange = TRUE;
		m_iNextState = _newState;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Accessor on the current state of the machine
	//Return value : Current state
	//------------------------------------------------------------------------------------------------------------------------------------------------------------------
	int StateMachine::GetState()
	{
		return m_iCurrentState;
	}
} //namespace fzn
