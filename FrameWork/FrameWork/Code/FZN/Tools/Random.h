#ifndef __FZN_RANDOM_H__
#define __FZN_RANDOM_H__

#include <random>

namespace fzn
{
	class FZN_EXPORT Random
	{
	public:
		//-------------------------------------------------------------------------------------------------
		/// Default constructor.
		//-------------------------------------------------------------------------------------------------
		Random();
		//-------------------------------------------------------------------------------------------------
		/// Constructor.
		/// @param	_uSeed	: Seed for the random number generation.
		//-------------------------------------------------------------------------------------------------
		Random( sf::Uint32 _uSeed );
		//-------------------------------------------------------------------------------------------------
		/// Destructor.
		//-------------------------------------------------------------------------------------------------
		~Random();

		//-------------------------------------------------------------------------------------------------
		/// Returns a random value
		/// @param	_uMinValue	: Minimum random value.
		/// @param	_uMinValue	: Maximum random value (included).
		//-------------------------------------------------------------------------------------------------
		sf::Uint32	operator()( sf::Uint32 _uMinValue = 0, sf::Uint32 _uMaxValue = UINT32_MAX );
		//-------------------------------------------------------------------------------------------------
		/// Returns a random value
		/// @param	_uMinValue	: Minimum random value.
		/// @param	_uMinValue	: Maximum random value (included).
		//-------------------------------------------------------------------------------------------------
		sf::Uint32	GetValue( sf::Uint32 _uMinValue = 0, sf::Uint32 _uMaxValue = UINT32_MAX );
		//-------------------------------------------------------------------------------------------------
		/// Returns true or false.
		//-------------------------------------------------------------------------------------------------
		bool		GetBool();

	private :
		std::default_random_engine m_oRandomEngine;
	};
}

#endif //__FZN_RANDOM_H__
